//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
    fn add_file() -> Weight;
    fn update_file() -> Weight;
    fn delete_file() -> Weight;
}

/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: TemplateModule Files (r:0 w:1)
    /// Proof: TemplateModule Files (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
    fn add_file() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(10_000_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: TemplateModule Files (r:1 w:1)
    /// Proof: TemplateModule Files (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
    fn update_file() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `32`
        //  Estimated: `3565`
        // Minimum execution time: 12_000_000 picoseconds.
        Weight::from_parts(12_000_000, 3565)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: TemplateModule Files (r:1 w:1)
    /// Proof: TemplateModule Files (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
    fn delete_file() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `32`
        //  Estimated: `3565`
        // Minimum execution time: 12_000_000 picoseconds.
        Weight::from_parts(12_000_000, 3565)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn add_file() -> Weight {
        Weight::from_parts(10_000_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    fn update_file() -> Weight {
        Weight::from_parts(12_000_000, 3565)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    fn delete_file() -> Weight {
        Weight::from_parts(12_000_000, 3565)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}